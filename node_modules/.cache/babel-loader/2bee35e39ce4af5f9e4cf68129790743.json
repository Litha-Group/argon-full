{"ast":null,"code":"var _jsxFileName = \"/home/ianwallace/lithalabs/argon/src/components/index-page/TooltipsPopovers.js\";\nimport React from \"react\"; // reactstrap components\n\nimport { Button, Row, Col, Tooltip, Popover, PopoverBody, PopoverHeader } from \"reactstrap\"; // Core Components\n\nconst colors = [\"primary\", \"info\", \"success\", \"warning\", \"danger\", \"default\", \"secondary\"];\nconst positions = [\"left\", \"top\", \"bottom\", \"right\"];\n\nconst TooltipExample = _ref => {\n  let {\n    placement,\n    color,\n    idKey\n  } = _ref;\n  const [tooltipOpen, setTooltipOpen] = React.useState(false);\n  const id = \"tooltip-\" + placement + \"-\" + color + \"-\" + idKey;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    className: \"btn-tooltip\",\n    \"data-toggle\": \"tooltip\",\n    color: color,\n    id: id,\n    size: \"sm\",\n    type: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, color !== \"dark\" ? color : \"on \" + placement), /*#__PURE__*/React.createElement(Tooltip, {\n    delay: 0,\n    placement: \"top\",\n    target: id,\n    isOpen: tooltipOpen,\n    toggle: () => setTooltipOpen(!tooltipOpen),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, \"Tooltip on top\"));\n};\n\nconst PopoverExample = _ref2 => {\n  let {\n    placement,\n    color,\n    idKey\n  } = _ref2;\n  const [popoverOpen, setPopoverOpen] = React.useState(false);\n  const id = \"popover-\" + placement + \"-\" + color + \"-\" + idKey;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    color: color,\n    id: id,\n    size: \"sm\",\n    type: \"button\",\n    \"data-toggle\": \"popover\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, color !== \"dark\" ? color : \"on \" + placement), /*#__PURE__*/React.createElement(Popover, {\n    delay: 0,\n    placement: placement,\n    target: id,\n    isOpen: popoverOpen,\n    toggle: () => setPopoverOpen(!popoverOpen),\n    popperClassName: color !== \"dark\" ? \"popover-\" + color : \"\",\n    trigger: \"focus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PopoverHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, \"Popover on \", placement), /*#__PURE__*/React.createElement(PopoverBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, \"Vivamus sagittis lacus vel augue laoreet rutrum faucibus.\")));\n};\n\nfunction Index() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    className: \"tooltips-popovers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"h4 text-success font-weight-bold mt-md mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, \"Tooltips\"), /*#__PURE__*/React.createElement(\"small\", {\n    className: \"d-block text-uppercase font-weight-bold mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, \"Colors\"), colors.map((prop, key) => {\n    return /*#__PURE__*/React.createElement(TooltipExample, {\n      key: key,\n      idKey: key,\n      color: prop,\n      placement: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }\n    });\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"small\", {\n    className: \"d-block text-uppercase font-weight-bold mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, \"Position\"), positions.map((prop, key) => {\n    return /*#__PURE__*/React.createElement(TooltipExample, {\n      key: key,\n      idKey: key,\n      color: \"dark\",\n      placement: prop,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 15\n      }\n    });\n  })), /*#__PURE__*/React.createElement(Col, {\n    className: \"mt-4 mt-lg-0\",\n    lg: \"6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"h4 text-success font-weight-bold mt-md mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, \"Popovers\"), /*#__PURE__*/React.createElement(\"small\", {\n    className: \"d-block text-uppercase font-weight-bold mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, \"Colors\"), colors.map((prop, key) => {\n    return /*#__PURE__*/React.createElement(PopoverExample, {\n      key: key,\n      idKey: key,\n      color: prop,\n      placement: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 15\n      }\n    });\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"small\", {\n    className: \"d-block text-uppercase font-weight-bold mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, \"Position\"), positions.map((prop, key) => {\n    return /*#__PURE__*/React.createElement(PopoverExample, {\n      key: key,\n      idKey: key,\n      color: \"dark\",\n      placement: prop,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 15\n      }\n    });\n  }))));\n}\n\nexport default Index;","map":{"version":3,"sources":["/home/ianwallace/lithalabs/argon/src/components/index-page/TooltipsPopovers.js"],"names":["React","Button","Row","Col","Tooltip","Popover","PopoverBody","PopoverHeader","colors","positions","TooltipExample","placement","color","idKey","tooltipOpen","setTooltipOpen","useState","id","PopoverExample","popoverOpen","setPopoverOpen","Index","map","prop","key"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n// reactstrap components\nimport {\n  Button,\n  Row,\n  Col,\n  Tooltip,\n  Popover,\n  PopoverBody,\n  PopoverHeader,\n} from \"reactstrap\";\n\n// Core Components\nconst colors = [\n  \"primary\",\n  \"info\",\n  \"success\",\n  \"warning\",\n  \"danger\",\n  \"default\",\n  \"secondary\",\n];\n\nconst positions = [\"left\", \"top\", \"bottom\", \"right\"];\n\nconst TooltipExample = ({ placement, color, idKey }) => {\n  const [tooltipOpen, setTooltipOpen] = React.useState(false);\n  const id = \"tooltip-\" + placement + \"-\" + color + \"-\" + idKey;\n  return (\n    <>\n      <Button\n        className=\"btn-tooltip\"\n        data-toggle=\"tooltip\"\n        color={color}\n        id={id}\n        size=\"sm\"\n        type=\"button\"\n      >\n        {color !== \"dark\" ? color : \"on \" + placement}\n      </Button>\n      <Tooltip\n        delay={0}\n        placement=\"top\"\n        target={id}\n        isOpen={tooltipOpen}\n        toggle={() => setTooltipOpen(!tooltipOpen)}\n      >\n        Tooltip on top\n      </Tooltip>\n    </>\n  );\n};\n\nconst PopoverExample = ({ placement, color, idKey }) => {\n  const [popoverOpen, setPopoverOpen] = React.useState(false);\n  const id = \"popover-\" + placement + \"-\" + color + \"-\" + idKey;\n  return (\n    <>\n      <Button\n        color={color}\n        id={id}\n        size=\"sm\"\n        type=\"button\"\n        data-toggle=\"popover\"\n      >\n        {color !== \"dark\" ? color : \"on \" + placement}\n      </Button>\n      <Popover\n        delay={0}\n        placement={placement}\n        target={id}\n        isOpen={popoverOpen}\n        toggle={() => setPopoverOpen(!popoverOpen)}\n        popperClassName={color !== \"dark\" ? \"popover-\" + color : \"\"}\n        trigger=\"focus\"\n      >\n        <PopoverHeader>Popover on {placement}</PopoverHeader>\n        <PopoverBody>\n          Vivamus sagittis lacus vel augue laoreet rutrum faucibus.\n        </PopoverBody>\n      </Popover>\n    </>\n  );\n};\n\nfunction Index() {\n  return (\n    <>\n      <Row className=\"tooltips-popovers\">\n        <Col lg=\"6\">\n          <h3 className=\"h4 text-success font-weight-bold mt-md mb-4\">\n            Tooltips\n          </h3>\n          <small className=\"d-block text-uppercase font-weight-bold mb-3\">\n            Colors\n          </small>\n          {colors.map((prop, key) => {\n            return (\n              <TooltipExample\n                key={key}\n                idKey={key}\n                color={prop}\n                placement=\"top\"\n              />\n            );\n          })}\n          <br></br>\n          <br></br>\n          <small className=\"d-block text-uppercase font-weight-bold mb-3\">\n            Position\n          </small>\n          {positions.map((prop, key) => {\n            return (\n              <TooltipExample\n                key={key}\n                idKey={key}\n                color=\"dark\"\n                placement={prop}\n              />\n            );\n          })}\n        </Col>\n        <Col className=\"mt-4 mt-lg-0\" lg=\"6\">\n          <h3 className=\"h4 text-success font-weight-bold mt-md mb-4\">\n            Popovers\n          </h3>\n          <small className=\"d-block text-uppercase font-weight-bold mb-3\">\n            Colors\n          </small>\n          {colors.map((prop, key) => {\n            return (\n              <PopoverExample\n                key={key}\n                idKey={key}\n                color={prop}\n                placement=\"top\"\n              />\n            );\n          })}\n          <br></br>\n          <br></br>\n          <small className=\"d-block text-uppercase font-weight-bold mb-3\">\n            Position\n          </small>\n          {positions.map((prop, key) => {\n            return (\n              <PopoverExample\n                key={key}\n                idKey={key}\n                color=\"dark\"\n                placement={prop}\n              />\n            );\n          })}\n        </Col>\n      </Row>\n    </>\n  );\n}\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}